package sb.ws;


import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import sb.dao.MoradaDAO;
import sb.SBApplication;
import sb.dao.ClienteDAO;

import sb.data.ClienteData;

@RestController
@CrossOrigin(origins = "http://localhost:4200", allowedHeaders = "*")
public class ClienteService {

	private final static Logger logger = LoggerFactory.getLogger(ClienteService.class);

	@Autowired
	private ClienteDAO clienteDAO;

	@Autowired
	private MoradaDAO addressDAO;

	@GetMapping("/user/findById/{id}")
	public ResponseEntity<?> findUser(@PathVariable("id") int id) {
		try {
			logger.info(">findUser(" + id + ")");
			ClienteData result = clienteDAO.readById(id);
			logger.info("<findUser:" + result);
			return new ResponseEntity<ClienteData>(result, HttpStatus.OK);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ResponseEntity<String>(SBApplication.ERROR_MSG, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	/*
	@GetMapping("/user/login")
	public ResponseEntity<?> loginCliente(@RequestBody ClienteData cliente, UriComponentsBuilder ucBuilder) {
		try {
			logger.info(">loginCliente(" + cliente.getMail() + ")");
			StringBuilder errorBuilder = new StringBuilder();
			Integer result = clienteDAO.loginCliente(cliente, errorBuilder);
			if(result == 1){
				logger.info("<findUser:" + result);
				return new ResponseEntity<Void>(HttpStatus.OK);
			} else{
				return new ResponseEntity<String>(errorBuilder.toString(), HttpStatus.INTERNAL_SERVER_ERROR);				
			}			
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ResponseEntity<String>(SBApplication.ERROR_MSG, HttpStatus.INTERNAL_SERVER_ERROR);			
		}
		
	}*/
	
	@GetMapping("/user/login/cliente/mail={mail}/password={password}")
	public ResponseEntity<?> loginCliente(@PathVariable("mail") String mail,@PathVariable("password") String password,UriComponentsBuilder ucBuilder) {
		try {
			logger.info(">loginCliente(" + mail +"#" +password+")");
			StringBuilder errorBuilder = new StringBuilder();
			Integer result = clienteDAO.loginCliente(mail,password, errorBuilder);
			if(result != null){
				logger.info("<findUser:" + result);
				String uniqueID = UUID.randomUUID().toString();
				return new ResponseEntity<String>( uniqueID,HttpStatus.OK);
			} else{
				logger.info(errorBuilder.toString());
				return new ResponseEntity<String>(errorBuilder.toString(), HttpStatus.INTERNAL_SERVER_ERROR);				
			}			
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ResponseEntity<String>(SBApplication.ERROR_MSG, HttpStatus.INTERNAL_SERVER_ERROR);			
		}
		
	}
	

	@GetMapping("/user/findByEmail/{email}")
	public ResponseEntity<?> findUserByMail(@PathVariable("email") String email) {
		try {
			logger.info(">findUser(" + email + ")");
			ClienteData result = clienteDAO.getByEmail(email);
			logger.info("<findUser:" + result);
			return new ResponseEntity<ClienteData>(result, HttpStatus.OK);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ResponseEntity<String>(SBApplication.ERROR_MSG, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PostMapping("/user/createUser")
	public ResponseEntity<?> createUser(@RequestBody ClienteData cliente, UriComponentsBuilder ucBuilder) {
		logger.info(">createUser(" + cliente + "#" + cliente.getMorada() + ")");
		StringBuilder errorBuilder = new StringBuilder();
		Integer newUserId = clienteDAO.create(cliente,errorBuilder);
		if (newUserId != null) {
			logger.info(">createUser:" + newUserId);
			cliente.getMorada().setIdUser(newUserId);
			addressDAO.create(cliente.getMorada());
			return new ResponseEntity<Void>(HttpStatus.OK);
		} else {
			return new ResponseEntity<String>(errorBuilder.toString(),HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}